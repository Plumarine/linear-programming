from cvxopt import matrix, solvers

foods = ['rice', 'quinoa', 'tortilla', 'lentils', 'broccoli']

c = matrix([0.5, 0.9, 0.1, 0.6, 0.4])
G = matrix([
    [-53., -40., -12., -53., -6.],
    [53., 40., 12., 53., 6.],
    [-4.4, -8., -3., -12., -1.9],
    [4.4, 8., 3., 12., 1.9],
    [-0.4, -3.6, -2., -0.9, -0.3],
    [0.4, 3.6, 2., 0.9, 0.3],
    [-1., 0., 0., 0., 0.],
    [0., -1., 0., 0., 0.],
    [0., 0., -1., 0., 0.],
    [0., 0., 0., -1., 0.],
    [0., 0., 0., 0., -1.]
    ]).trans()
G = matrix([
    [-53, 53, -4.4, 4.4, -0.4, 0.4, 
        -1, 0, 0, 0, 0], 
    [-40, 40, -8, 8, -3.6, 3.6, 
        0, -1, 0, 0, 0], 
    [-12, 12, -3, 3, -2, 2, 
        0, 0, -1, 0, 0], 
    [-53, 53, -12, 12, -0.9, 0.9, 
        0, 0, 0, -1, 0], 
    [6, -6, -1.9, 1.9, -0.3, 0.3, 
        0, 0, 0, 0, -1]], tc='d') 
h = matrix([-100., 1000., -10., 1000., 0., 100., 0., 0., 0., 0., 0.])
print(G)
print(h)

solution = solvers.lp(c, G, h)
print("Primal objective: {0:.10f}".format(solution['primal objective']))
print("Solution:", ["{0}: {1:.5f}".format(food, sol) 
    for food, sol in zip(foods, solution['x'])])

# Include constraint on cost for each food
print("Max food cost constraint")
c = matrix([0.5, 0.9, 0.1, 0.6, 0.4], tc='d')
G = matrix([
    [-53, 53, -4.4, 4.4, -0.4, 0.4, 
        -1, 0, 0, 0, 0, 
        0.2, -0.54, -0.06, -0.36, -0.24],
    [-40, 40, -8, 8, -3.6, 3.6, 
        0, -1, 0, 0, 0, 
        -0.3, 0.36, -0.06, -0.36, -0.24],
    [-12, 12, -3, 3, -2, 2, 
        0, 0, -1, 0, 0, 
        -0.3, -0.54, 0.04, -0.36, -0.24],
    [-53, 53, -12, 12, -0.9, 0.9, 
        0, 0, 0, -1, 0, 
        -0.3, -0.54, -0.06, 0.24, -0.24],
    [6, -6, -1.9, 1.9, -0.3, 0.3, 
        0, 0, 0, 0, -1, 
        -0.3, -0.54, -0.06, -0.36, 0.16]], tc='d')
G = matrix([
    [-53, 53, -4.4, 4.4, -0.4, 0.4, 
        -1, 0, 0, 0, 0, 
        0.2, -0.3, -0.3, -0.3, -0.3],
    [-40, 40, -8, 8, -3.6, 3.6, 
        0, -1, 0, 0, 0, 
        -0.54, 0.36, -0.54, -0.54, -0.54],
    [-12, 12, -3, 3, -2, 2, 
        0, 0, -1, 0, 0, 
        -0.06, -0.06, 0.04, -0.06, -0.06],
    [-53, 53, -12, 12, -0.9, 0.9, 
        0, 0, 0, -1, 0, 
        -0.36, -0.36, -0.36, 0.24, -0.36],
    [6, -6, -1.9, 1.9, -0.3, 0.3, 
        0, 0, 0, 0, -1, 
        -0.24, -0.24, -0.24, -0.24, 0.16]], tc='d')

h = matrix([-100., 1000., -10., 1000., 0., 100., 
    0., 0., 0., 0., 0., 
    0., 0., 0., 0., 0.], 
    tc='d')

print(G)
print(h)

solution = solvers.lp(c, G, h)
print("Primal objective: {0:.10f}".format(solution['primal objective']))
print("Solution:", ["{0}: {1:.5f}".format(food, sol) 
    for food, sol in zip(foods, solution['x'])])

# Max out protein
print("Max protein")
c = matrix([-4.4, -8, -3, -12, -1.9], tc='d')
G = matrix([
    [0.5, -53, 53, -0.4, 0.4, 
        -1, 0, 0, 0, 0], 
    [0.9, -40, 40, -3.6, 3.6, 
        0, -1, 0, 0, 0], 
    [0.1, -12, 12, -2, 2, 
        0, 0, -1, 0, 0], 
    [0.6, -53, 53, -0.9, 0.9, 
        0, 0, 0, -1, 0], 
    [0.4, 6, -6, -0.3, 0.3, 
        0, 0, 0, 0, -1]], tc='d') 
h = matrix([
    2, -100., 1000., 0., 100., 
    0., 0., 0., 0., 0.], tc='d')
print(G)
print(h)

solution = solvers.lp(c, G, h)
print("Primal objective: {0:.10f}".format(solution['primal objective']))
print("Solution:", ["{0}: {1:.5f}".format(food, sol) 
    for food, sol in zip(foods, solution['x'])])

